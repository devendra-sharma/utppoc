/*
 * Created on 15 Oct 2015 ( Time 20:28:30 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package net.atos.transport.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import net.atos.transport.entity.FaresCheckingExclusion;
import net.atos.transport.entity.jpa.FaresCheckingExclusionEntity;

import java.util.Date;

import net.atos.transport.business.service.FaresCheckingExclusionService;
import net.atos.transport.business.service.mapping.FaresCheckingExclusionServiceMapper;
import net.atos.transport.data.repository.jpa.FaresCheckingExclusionJpaRepository;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of FaresCheckingExclusionService
 */
@Component
@Transactional
public class FaresCheckingExclusionServiceImpl implements FaresCheckingExclusionService {

	@Resource
	private FaresCheckingExclusionJpaRepository faresCheckingExclusionJpaRepository;

	@Resource
	private FaresCheckingExclusionServiceMapper faresCheckingExclusionServiceMapper;
	
	@Override
	public FaresCheckingExclusion findById(Long faresCheckingExclusionId) {
		FaresCheckingExclusionEntity faresCheckingExclusionEntity = faresCheckingExclusionJpaRepository.findOne(faresCheckingExclusionId);
		return faresCheckingExclusionServiceMapper.mapFaresCheckingExclusionEntityToFaresCheckingExclusion(faresCheckingExclusionEntity);
	}

	@Override
	public List<FaresCheckingExclusion> findAll() {
		Iterable<FaresCheckingExclusionEntity> entities = faresCheckingExclusionJpaRepository.findAll();
		List<FaresCheckingExclusion> beans = new ArrayList<FaresCheckingExclusion>();
		for(FaresCheckingExclusionEntity faresCheckingExclusionEntity : entities) {
			beans.add(faresCheckingExclusionServiceMapper.mapFaresCheckingExclusionEntityToFaresCheckingExclusion(faresCheckingExclusionEntity));
		}
		return beans;
	}

	@Override
	public FaresCheckingExclusion save(FaresCheckingExclusion faresCheckingExclusion) {
		return update(faresCheckingExclusion) ;
	}

	@Override
	public FaresCheckingExclusion create(FaresCheckingExclusion faresCheckingExclusion) {
		FaresCheckingExclusionEntity faresCheckingExclusionEntity = faresCheckingExclusionJpaRepository.findOne(faresCheckingExclusion.getFaresCheckingExclusionId());
		if( faresCheckingExclusionEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		faresCheckingExclusionEntity = new FaresCheckingExclusionEntity();
		faresCheckingExclusionServiceMapper.mapFaresCheckingExclusionToFaresCheckingExclusionEntity(faresCheckingExclusion, faresCheckingExclusionEntity);
		FaresCheckingExclusionEntity faresCheckingExclusionEntitySaved = faresCheckingExclusionJpaRepository.save(faresCheckingExclusionEntity);
		return faresCheckingExclusionServiceMapper.mapFaresCheckingExclusionEntityToFaresCheckingExclusion(faresCheckingExclusionEntitySaved);
	}

	@Override
	public FaresCheckingExclusion update(FaresCheckingExclusion faresCheckingExclusion) {
		FaresCheckingExclusionEntity faresCheckingExclusionEntity = faresCheckingExclusionJpaRepository.findOne(faresCheckingExclusion.getFaresCheckingExclusionId());
		faresCheckingExclusionServiceMapper.mapFaresCheckingExclusionToFaresCheckingExclusionEntity(faresCheckingExclusion, faresCheckingExclusionEntity);
		FaresCheckingExclusionEntity faresCheckingExclusionEntitySaved = faresCheckingExclusionJpaRepository.save(faresCheckingExclusionEntity);
		return faresCheckingExclusionServiceMapper.mapFaresCheckingExclusionEntityToFaresCheckingExclusion(faresCheckingExclusionEntitySaved);
	}

	@Override
	public void delete(Long faresCheckingExclusionId) {
		faresCheckingExclusionJpaRepository.delete(faresCheckingExclusionId);
	}

	public FaresCheckingExclusionJpaRepository getFaresCheckingExclusionJpaRepository() {
		return faresCheckingExclusionJpaRepository;
	}

	public void setFaresCheckingExclusionJpaRepository(FaresCheckingExclusionJpaRepository faresCheckingExclusionJpaRepository) {
		this.faresCheckingExclusionJpaRepository = faresCheckingExclusionJpaRepository;
	}

	public FaresCheckingExclusionServiceMapper getFaresCheckingExclusionServiceMapper() {
		return faresCheckingExclusionServiceMapper;
	}

	public void setFaresCheckingExclusionServiceMapper(FaresCheckingExclusionServiceMapper faresCheckingExclusionServiceMapper) {
		this.faresCheckingExclusionServiceMapper = faresCheckingExclusionServiceMapper;
	}

	@Override
	public FaresCheckingExclusion getFaresExclusionByParams(String sellingLocation,
			String originLocation, String destinationLocation, String route,
			String product, String ticketStatus) {
		FaresCheckingExclusionEntity entity = faresCheckingExclusionJpaRepository.findByParams(sellingLocation, originLocation, destinationLocation, route, product, ticketStatus);
		return faresCheckingExclusionServiceMapper.mapFaresCheckingExclusionEntityToFaresCheckingExclusion(entity);
	}

}
