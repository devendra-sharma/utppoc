/*
 * Created on 15 Oct 2015 ( Time 20:28:30 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package net.atos.transport.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import net.atos.transport.entity.FaresCheckingExclusion;
import net.atos.transport.entity.jpa.FaresCheckingExclusionEntity;
import net.atos.transport.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class FaresCheckingExclusionServiceMapperTest {

	private FaresCheckingExclusionServiceMapper faresCheckingExclusionServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		faresCheckingExclusionServiceMapper = new FaresCheckingExclusionServiceMapper();
		faresCheckingExclusionServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'FaresCheckingExclusionEntity' to 'FaresCheckingExclusion'
	 * @param faresCheckingExclusionEntity
	 */
	@Test
	public void testMapFaresCheckingExclusionEntityToFaresCheckingExclusion() {
		// Given
		FaresCheckingExclusionEntity faresCheckingExclusionEntity = new FaresCheckingExclusionEntity();
		faresCheckingExclusionEntity.setValue(mockValues.nextString(45));
		faresCheckingExclusionEntity.setIssuingLocation(mockValues.nextString(45));
		faresCheckingExclusionEntity.setSellingLocation(mockValues.nextString(45));
		faresCheckingExclusionEntity.setOriginLocation(mockValues.nextString(45));
		faresCheckingExclusionEntity.setDestinationLocation(mockValues.nextString(45));
		faresCheckingExclusionEntity.setRoute(mockValues.nextString(45));
		faresCheckingExclusionEntity.setProduct(mockValues.nextString(45));
		faresCheckingExclusionEntity.setTicketStatus(mockValues.nextString(45));
		faresCheckingExclusionEntity.setFare(mockValues.nextString(45));
		faresCheckingExclusionEntity.setWithEffectFrom(mockValues.nextDate());
		faresCheckingExclusionEntity.setWithEffectUntil(mockValues.nextDate());
		faresCheckingExclusionEntity.setNullFare(mockValues.nextString(45));
		
		// When
		FaresCheckingExclusion faresCheckingExclusion = faresCheckingExclusionServiceMapper.mapFaresCheckingExclusionEntityToFaresCheckingExclusion(faresCheckingExclusionEntity);
		
		// Then
		assertEquals(faresCheckingExclusionEntity.getValue(), faresCheckingExclusion.getValue());
		assertEquals(faresCheckingExclusionEntity.getIssuingLocation(), faresCheckingExclusion.getIssuingLocation());
		assertEquals(faresCheckingExclusionEntity.getSellingLocation(), faresCheckingExclusion.getSellingLocation());
		assertEquals(faresCheckingExclusionEntity.getOriginLocation(), faresCheckingExclusion.getOriginLocation());
		assertEquals(faresCheckingExclusionEntity.getDestinationLocation(), faresCheckingExclusion.getDestinationLocation());
		assertEquals(faresCheckingExclusionEntity.getRoute(), faresCheckingExclusion.getRoute());
		assertEquals(faresCheckingExclusionEntity.getProduct(), faresCheckingExclusion.getProduct());
		assertEquals(faresCheckingExclusionEntity.getTicketStatus(), faresCheckingExclusion.getTicketStatus());
		assertEquals(faresCheckingExclusionEntity.getFare(), faresCheckingExclusion.getFare());
		assertEquals(faresCheckingExclusionEntity.getWithEffectFrom(), faresCheckingExclusion.getWithEffectFrom());
		assertEquals(faresCheckingExclusionEntity.getWithEffectUntil(), faresCheckingExclusion.getWithEffectUntil());
		assertEquals(faresCheckingExclusionEntity.getNullFare(), faresCheckingExclusion.getNullFare());
	}
	
	/**
	 * Test : Mapping from 'FaresCheckingExclusion' to 'FaresCheckingExclusionEntity'
	 */
	@Test
	public void testMapFaresCheckingExclusionToFaresCheckingExclusionEntity() {
		// Given
		FaresCheckingExclusion faresCheckingExclusion = new FaresCheckingExclusion();
		faresCheckingExclusion.setValue(mockValues.nextString(45));
		faresCheckingExclusion.setIssuingLocation(mockValues.nextString(45));
		faresCheckingExclusion.setSellingLocation(mockValues.nextString(45));
		faresCheckingExclusion.setOriginLocation(mockValues.nextString(45));
		faresCheckingExclusion.setDestinationLocation(mockValues.nextString(45));
		faresCheckingExclusion.setRoute(mockValues.nextString(45));
		faresCheckingExclusion.setProduct(mockValues.nextString(45));
		faresCheckingExclusion.setTicketStatus(mockValues.nextString(45));
		faresCheckingExclusion.setFare(mockValues.nextString(45));
		faresCheckingExclusion.setWithEffectFrom(mockValues.nextDate());
		faresCheckingExclusion.setWithEffectUntil(mockValues.nextDate());
		faresCheckingExclusion.setNullFare(mockValues.nextString(45));

		FaresCheckingExclusionEntity faresCheckingExclusionEntity = new FaresCheckingExclusionEntity();
		
		// When
		faresCheckingExclusionServiceMapper.mapFaresCheckingExclusionToFaresCheckingExclusionEntity(faresCheckingExclusion, faresCheckingExclusionEntity);
		
		// Then
		assertEquals(faresCheckingExclusion.getValue(), faresCheckingExclusionEntity.getValue());
		assertEquals(faresCheckingExclusion.getIssuingLocation(), faresCheckingExclusionEntity.getIssuingLocation());
		assertEquals(faresCheckingExclusion.getSellingLocation(), faresCheckingExclusionEntity.getSellingLocation());
		assertEquals(faresCheckingExclusion.getOriginLocation(), faresCheckingExclusionEntity.getOriginLocation());
		assertEquals(faresCheckingExclusion.getDestinationLocation(), faresCheckingExclusionEntity.getDestinationLocation());
		assertEquals(faresCheckingExclusion.getRoute(), faresCheckingExclusionEntity.getRoute());
		assertEquals(faresCheckingExclusion.getProduct(), faresCheckingExclusionEntity.getProduct());
		assertEquals(faresCheckingExclusion.getTicketStatus(), faresCheckingExclusionEntity.getTicketStatus());
		assertEquals(faresCheckingExclusion.getFare(), faresCheckingExclusionEntity.getFare());
		assertEquals(faresCheckingExclusion.getWithEffectFrom(), faresCheckingExclusionEntity.getWithEffectFrom());
		assertEquals(faresCheckingExclusion.getWithEffectUntil(), faresCheckingExclusionEntity.getWithEffectUntil());
		assertEquals(faresCheckingExclusion.getNullFare(), faresCheckingExclusionEntity.getNullFare());
	}

}