/*
 * Created on 15 Oct 2015 ( Time 20:28:30 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package net.atos.transport.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import net.atos.transport.entity.FaresCheckingExclusion;
import net.atos.transport.entity.jpa.FaresCheckingExclusionEntity;
import java.util.Date;
import net.atos.transport.business.service.mapping.FaresCheckingExclusionServiceMapper;
import net.atos.transport.data.repository.jpa.FaresCheckingExclusionJpaRepository;
import net.atos.transport.test.FaresCheckingExclusionFactoryForTest;
import net.atos.transport.test.FaresCheckingExclusionEntityFactoryForTest;
import net.atos.transport.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of FaresCheckingExclusionService
 */
@RunWith(MockitoJUnitRunner.class)
public class FaresCheckingExclusionServiceImplTest
{

    @InjectMocks
    private FaresCheckingExclusionServiceImpl faresCheckingExclusionService;

    @Mock
    private FaresCheckingExclusionJpaRepository faresCheckingExclusionJpaRepository;

    @Mock
    private FaresCheckingExclusionServiceMapper faresCheckingExclusionServiceMapper;

    private FaresCheckingExclusionFactoryForTest faresCheckingExclusionFactoryForTest = new FaresCheckingExclusionFactoryForTest();

    private FaresCheckingExclusionEntityFactoryForTest faresCheckingExclusionEntityFactoryForTest = new FaresCheckingExclusionEntityFactoryForTest();

    private MockValues mockValues = new MockValues();

    @Test
    public void findById()
    {
        // Given
        Long faresCheckingExclusionId = mockValues.nextLong();

        FaresCheckingExclusionEntity faresCheckingExclusionEntity = faresCheckingExclusionJpaRepository
                .findOne(faresCheckingExclusionId);

        FaresCheckingExclusion faresCheckingExclusion = faresCheckingExclusionFactoryForTest
                .newFaresCheckingExclusion();
        when(
                faresCheckingExclusionServiceMapper
                        .mapFaresCheckingExclusionEntityToFaresCheckingExclusion(faresCheckingExclusionEntity))
                .thenReturn(faresCheckingExclusion);

        // When
        FaresCheckingExclusion faresCheckingExclusionFound = faresCheckingExclusionService
                .findById(faresCheckingExclusionId);

        // Then
        assertEquals(faresCheckingExclusion.getFaresCheckingExclusionId(),
                faresCheckingExclusionFound.getFaresCheckingExclusionId());
    }

    @Test
    public void findAll()
    {
        // Given
        List<FaresCheckingExclusionEntity> faresCheckingExclusionEntitys = new ArrayList<FaresCheckingExclusionEntity>();
        FaresCheckingExclusionEntity faresCheckingExclusionEntity1 = faresCheckingExclusionEntityFactoryForTest
                .newFaresCheckingExclusionEntity();
        faresCheckingExclusionEntitys.add(faresCheckingExclusionEntity1);
        FaresCheckingExclusionEntity faresCheckingExclusionEntity2 = faresCheckingExclusionEntityFactoryForTest
                .newFaresCheckingExclusionEntity();
        faresCheckingExclusionEntitys.add(faresCheckingExclusionEntity2);
        when(faresCheckingExclusionJpaRepository.findAll()).thenReturn(faresCheckingExclusionEntitys);

        FaresCheckingExclusion faresCheckingExclusion1 = faresCheckingExclusionFactoryForTest
                .newFaresCheckingExclusion();
        when(
                faresCheckingExclusionServiceMapper
                        .mapFaresCheckingExclusionEntityToFaresCheckingExclusion(faresCheckingExclusionEntity1))
                .thenReturn(faresCheckingExclusion1);
        FaresCheckingExclusion faresCheckingExclusion2 = faresCheckingExclusionFactoryForTest
                .newFaresCheckingExclusion();
        when(
                faresCheckingExclusionServiceMapper
                        .mapFaresCheckingExclusionEntityToFaresCheckingExclusion(faresCheckingExclusionEntity2))
                .thenReturn(faresCheckingExclusion2);

        // When
        List<FaresCheckingExclusion> faresCheckingExclusionsFounds = faresCheckingExclusionService.findAll();

        // Then
        assertTrue(faresCheckingExclusion1 == faresCheckingExclusionsFounds.get(0));
        assertTrue(faresCheckingExclusion2 == faresCheckingExclusionsFounds.get(1));
    }

    @Test
    public void create()
    {
        // Given
        FaresCheckingExclusion faresCheckingExclusion = faresCheckingExclusionFactoryForTest
                .newFaresCheckingExclusion();

        FaresCheckingExclusionEntity faresCheckingExclusionEntity = faresCheckingExclusionEntityFactoryForTest
                .newFaresCheckingExclusionEntity();
        when(faresCheckingExclusionJpaRepository.findOne(faresCheckingExclusion.getFaresCheckingExclusionId()))
                .thenReturn(null);

        faresCheckingExclusionEntity = new FaresCheckingExclusionEntity();
        faresCheckingExclusionServiceMapper.mapFaresCheckingExclusionToFaresCheckingExclusionEntity(
                faresCheckingExclusion, faresCheckingExclusionEntity);
        FaresCheckingExclusionEntity faresCheckingExclusionEntitySaved = faresCheckingExclusionJpaRepository
                .save(faresCheckingExclusionEntity);

        FaresCheckingExclusion faresCheckingExclusionSaved = faresCheckingExclusionFactoryForTest
                .newFaresCheckingExclusion();
        when(
                faresCheckingExclusionServiceMapper
                        .mapFaresCheckingExclusionEntityToFaresCheckingExclusion(faresCheckingExclusionEntitySaved))
                .thenReturn(faresCheckingExclusionSaved);

        // When
        FaresCheckingExclusion faresCheckingExclusionResult = faresCheckingExclusionService
                .create(faresCheckingExclusion);

        // Then
        assertTrue(faresCheckingExclusionResult == faresCheckingExclusionSaved);
    }

    @Test
    public void createKOExists()
    {
        // Given
        FaresCheckingExclusion faresCheckingExclusion = faresCheckingExclusionFactoryForTest
                .newFaresCheckingExclusion();

        FaresCheckingExclusionEntity faresCheckingExclusionEntity = faresCheckingExclusionEntityFactoryForTest
                .newFaresCheckingExclusionEntity();
        when(faresCheckingExclusionJpaRepository.findOne(faresCheckingExclusion.getFaresCheckingExclusionId()))
                .thenReturn(faresCheckingExclusionEntity);

        // When
        Exception exception = null;
        try
        {
            faresCheckingExclusionService.create(faresCheckingExclusion);
        }
        catch (Exception e)
        {
            exception = e;
        }

        // Then
        assertTrue(exception instanceof IllegalStateException);
        assertEquals("already.exists", exception.getMessage());
    }

    @Test
    public void update()
    {
        // Given
        FaresCheckingExclusion faresCheckingExclusion = faresCheckingExclusionFactoryForTest
                .newFaresCheckingExclusion();

        FaresCheckingExclusionEntity faresCheckingExclusionEntity = faresCheckingExclusionEntityFactoryForTest
                .newFaresCheckingExclusionEntity();
        when(faresCheckingExclusionJpaRepository.findOne(faresCheckingExclusion.getFaresCheckingExclusionId()))
                .thenReturn(faresCheckingExclusionEntity);

        FaresCheckingExclusionEntity faresCheckingExclusionEntitySaved = faresCheckingExclusionEntityFactoryForTest
                .newFaresCheckingExclusionEntity();
        when(faresCheckingExclusionJpaRepository.save(faresCheckingExclusionEntity)).thenReturn(
                faresCheckingExclusionEntitySaved);

        FaresCheckingExclusion faresCheckingExclusionSaved = faresCheckingExclusionFactoryForTest
                .newFaresCheckingExclusion();
        when(
                faresCheckingExclusionServiceMapper
                        .mapFaresCheckingExclusionEntityToFaresCheckingExclusion(faresCheckingExclusionEntitySaved))
                .thenReturn(faresCheckingExclusionSaved);

        // When
        FaresCheckingExclusion faresCheckingExclusionResult = faresCheckingExclusionService
                .update(faresCheckingExclusion);

        // Then
        verify(faresCheckingExclusionServiceMapper).mapFaresCheckingExclusionToFaresCheckingExclusionEntity(
                faresCheckingExclusion, faresCheckingExclusionEntity);
        assertTrue(faresCheckingExclusionResult == faresCheckingExclusionSaved);
    }

    @Test
    public void delete()
    {
        // Given
        Long faresCheckingExclusionId = mockValues.nextLong();

        // When
        faresCheckingExclusionService.delete(faresCheckingExclusionId);

        // Then
        verify(faresCheckingExclusionJpaRepository).delete(faresCheckingExclusionId);

    }

}
